<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sec_spawn_timer = 3; 
spawn_offset = 10; 
spawn_x = 10; 
spawn_y = 10;
alarm[0] = sec_spawn_timer * room_speed; 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rand_spawn_angle = irandom(360);
rand_spawn_rad = degtorad(rand_spawn_angle)
if rand_spawn_angle &lt;= global.angle_room_midline || rand_spawn_angle &gt; (360 - global.angle_room_midline){
    spawn_x = room_width - spawn_offset;
    spawn_y_mid_offset = tan(rand_spawn_rad) * (room_width / 2);
    spawn_y = (room_height / 2) - spawn_y_mid_offset;
}
else if rand_spawn_angle &gt; global.angle_room_midline &amp;&amp; rand_spawn_angle &lt;= (global.angle_room_midline + 90){
    spawn_y =  spawn_offset;
    spawn_x_mid_offset = (room_height / 2) / tan(rand_spawn_rad);
    spawn_x = (room_width / 2) + spawn_x_mid_offset
}
else if rand_spawn_angle &gt; (global.angle_room_midline + 90) &amp;&amp; rand_spawn_angle &lt;= (global.angle_room_midline + 180) {
    spawn_x = spawn_offset; 
    spawn_y_mid_offset = tan(rand_spawn_rad) * (room_width / 2);
    spawn_y = (room_height / 2) + spawn_y_mid_offset 
    
}
else {
    spawn_y = room_height - spawn_offset;
    spawn_x_mid_offset = (room_height / 2) / tan(rand_spawn_rad);
    spawn_x = (room_width / 2) - spawn_x_mid_offset
} 

 
instance_create(spawn_x, spawn_y, obj_enemy);
spawn_x += 10; 
spawn_y += 10; 
alarm[0] = sec_spawn_timer * room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
