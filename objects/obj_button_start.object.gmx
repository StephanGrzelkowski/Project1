<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>string_button = "Start"; 
draw_sprite_xstretch = 3; 
draw_sprite_ystretch = 3; 
cur_sprite_width = sprite_width; 
cur_sprite_height = sprite_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var cur_sprite_width = sprite_get_width(spr_button);
var cur_sprite_height = sprite_get_height(spr_button);
sprite_width_tot = cur_sprite_width * draw_sprite_xstretch; 
sprite_height_tot = cur_sprite_height * draw_sprite_ystretch; 

if (mouse_x &gt;= x) &amp;&amp; (mouse_x &lt;= (x + sprite_width_tot)) &amp;&amp; (mouse_y &gt;= y) &amp;&amp; (mouse_y &lt;= (y + sprite_height_tot))
{
    
    draw_sprite_xstretch = 4;
    draw_sprite_ystretch = 4;
    mouse_collision = true;
    if mouse_check_button_released(1)
    {
        scr_menu_option(string_button)
    }
}
else {
    
    draw_sprite_xstretch = 3; 
    draw_sprite_ystretch = 3; 
    mouse_collision = false;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_halign(fa_left)
draw_set_valign(fa_top)
draw_set_font(fnt_menu);

draw_set_colour(c_black);
draw_sprite_ext(spr_button, 0,x,y, draw_sprite_xstretch, draw_sprite_ystretch, 0, c_white, 1);
draw_set_halign(fa_center)
draw_set_valign(fa_middle)
draw_text(x + sprite_width_tot / 2, y + sprite_height_tot / 2, string_button)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
